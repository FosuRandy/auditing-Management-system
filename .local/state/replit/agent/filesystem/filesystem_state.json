{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"audit-management-fallback-key-2025\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# File upload configuration\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n\n# initialize the app with the extension\ndb.init_app(app)\n\n# Initialize database and create tables\ndef init_database():\n    with app.app_context():\n        # Import models to ensure tables are created\n        import models  # noqa: F401\n        db.create_all()\n        \n        # Create default admin user if none exists\n        from models import User\n        from werkzeug.security import generate_password_hash\n        \n        try:\n            admin = User.query.filter_by(username='admin').first()\n            if not admin:\n                admin_user = User()\n                admin_user.username = 'admin'\n                admin_user.email = 'admin@audit.system'\n                admin_user.password_hash = generate_password_hash('admin123')\n                admin_user.role = 'admin'\n                admin_user.first_name = 'System'\n                admin_user.last_name = 'Administrator'\n                admin_user.is_active = True\n                admin_user.password_reset_required = False\n                \n                db.session.add(admin_user)\n                db.session.commit()\n                logging.info(\"Default admin user created: admin/admin123\")\n        except Exception as e:\n            logging.error(f\"Error creating admin user: {str(e)}\")\n            db.session.rollback()\n\n# Initialize database when app starts\ninit_database()\n","size_bytes":2195},"auth.py":{"content":"from flask import session, request, redirect, url_for, flash\nfrom functools import wraps\nfrom models import User, AuditLog\nfrom app import db\nimport logging\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            flash('Please log in to access this page.', 'warning')\n            return redirect(url_for('landing'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef role_required(*roles):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if 'user_id' not in session:\n                flash('Please log in to access this page.', 'warning')\n                return redirect(url_for('landing'))\n            \n            user = User.query.get(session['user_id'])\n            \n            # Map old role names to new ones for compatibility\n            role_mapping = {\n                'admin': 'director',\n                'supervisor': 'head_of_business_control'\n            }\n            \n            # Map allowed roles to actual roles\n            mapped_roles = []\n            for role in roles:\n                mapped_roles.append(role_mapping.get(role, role))\n            \n            if not user or user.role not in mapped_roles:\n                flash('You do not have permission to access this page.', 'error')\n                return redirect(url_for('dashboard'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\ndef get_current_user():\n    if 'user_id' in session:\n        user = User.query.get(session['user_id'])\n        if user and user.is_active:\n            return user\n    return None\n\ndef log_audit_action(action, entity_type, entity_id=None, details=None):\n    \"\"\"Log user actions for audit trail\"\"\"\n    try:\n        user = get_current_user()\n        if user:\n            audit_log = AuditLog()\n            audit_log.user_id = user.id\n            audit_log.action = action\n            audit_log.entity_type = entity_type\n            audit_log.entity_id = entity_id\n            audit_log.details = details\n            audit_log.ip_address = request.remote_addr\n            db.session.add(audit_log)\n            db.session.commit()\n            logging.info(f\"Audit log created: {action} by {user.username}\")\n    except Exception as e:\n        logging.error(f\"Failed to create audit log: {str(e)}\")\n\ndef check_password_reset_required():\n    \"\"\"Check if current user needs to reset password\"\"\"\n    user = get_current_user()\n    if user and user.password_reset_required:\n        return True\n    return False\n","size_bytes":2605},"main.py":{"content":"from app import app\nfrom routes import *\nfrom auth import *\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":139},"models.py":{"content":"from app import db\nfrom datetime import datetime\nfrom sqlalchemy import text\nimport uuid\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    role = db.Column(db.String(30), nullable=False)  # director, head_of_business_control, auditor, auditee\n    first_name = db.Column(db.String(64), nullable=False)\n    last_name = db.Column(db.String(64), nullable=False)\n    phone = db.Column(db.String(20), nullable=True)\n    address = db.Column(db.Text, nullable=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    password_reset_required = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_login = db.Column(db.DateTime, nullable=True)\n    \n    # Relationships\n    department = db.relationship('Department', foreign_keys=[department_id], backref='users')\n    assigned_audits = db.relationship('Audit', foreign_keys='Audit.auditor_id', backref='auditor')\n    auditee_audits = db.relationship('Audit', foreign_keys='Audit.auditee_id', backref='auditee')\n    supervised_audits = db.relationship('Audit', foreign_keys='Audit.supervisor_id', backref='head_of_business_control')\n    created_audits = db.relationship('Audit', foreign_keys='Audit.created_by_id', backref='creator')\n    directed_audits = db.relationship('Audit', foreign_keys='Audit.director_id', backref='director')\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n    \n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass Department(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False, unique=True)\n    description = db.Column(db.Text, nullable=True)\n    head_name = db.Column(db.String(100), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    units = db.relationship('DepartmentUnit', backref='department', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Department {self.name}>'\n\nclass DepartmentUnit(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)\n    unit_head_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    unit_head = db.relationship('User', foreign_keys=[unit_head_id])\n    \n    def __repr__(self):\n        return f'<DepartmentUnit {self.name}>'\n\nclass AuditTemplate(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    audit_type = db.Column(db.String(50), nullable=False)  # internal, external, compliance, etc.\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    created_by = db.relationship('User', backref='created_templates')\n    checklist_items = db.relationship('ChecklistItem', backref='template', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<AuditTemplate {self.name}>'\n\nclass ChecklistItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    template_id = db.Column(db.Integer, db.ForeignKey('audit_template.id'), nullable=False)\n    item_text = db.Column(db.Text, nullable=False)\n    category = db.Column(db.String(100), nullable=True)\n    is_mandatory = db.Column(db.Boolean, default=True)\n    order_index = db.Column(db.Integer, default=0)\n    \n    def __repr__(self):\n        return f'<ChecklistItem {self.item_text[:50]}>'\n\nclass Audit(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    reference_number = db.Column(db.String(50), unique=True, nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    audit_type = db.Column(db.String(50), nullable=False)\n    status = db.Column(db.String(30), default='assigned')  # assigned, acknowledged, plan_submitted, plan_approved, in_progress, review, closed\n    priority = db.Column(db.String(20), default='medium')  # low, medium, high, critical\n    \n    # Audit scope and objectives (Phase 1)\n    audit_scope = db.Column(db.Text, nullable=True)\n    audit_objectives = db.Column(db.Text, nullable=True)\n    audit_criteria = db.Column(db.Text, nullable=True)\n    resources_needed = db.Column(db.Text, nullable=True)\n    \n    # Auditor acknowledgment and planning (Phase 2)\n    auditor_acknowledged_at = db.Column(db.DateTime, nullable=True)\n    audit_plan = db.Column(db.Text, nullable=True)\n    audit_methodology = db.Column(db.Text, nullable=True)\n    audit_checklist = db.Column(db.Text, nullable=True)\n    data_request_list = db.Column(db.Text, nullable=True)\n    \n    # Head of Business Control Plan Submission (Phase 3)\n    plan_submitted_at = db.Column(db.DateTime, nullable=True)  # When Head of Business Control submits plan to Director\n    \n    # Director approval (Phase 4)  \n    director_approved_at = db.Column(db.DateTime, nullable=True)\n    director_feedback = db.Column(db.Text, nullable=True)\n    \n    # Auditor assignment (Phase 5)\n    auditor_assigned_at = db.Column(db.DateTime, nullable=True)  # When Head of Business Control assigns auditor\n    plan_approved_at = db.Column(db.DateTime, nullable=True)  # Final approval timestamp\n    supervisor_feedback = db.Column(db.Text, nullable=True)\n    \n    # Auditee coordination\n    auditee_notified_at = db.Column(db.DateTime, nullable=True)\n    auditee_acknowledged_at = db.Column(db.DateTime, nullable=True)\n    document_request_sent_at = db.Column(db.DateTime, nullable=True)\n    access_arrangements_completed = db.Column(db.Boolean, default=False)\n    \n    # Assignment\n    auditor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Assigned by Head of Business Control after Director approval\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    supervisor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Head of Business Control\n    director_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Director for approval\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=True)\n    \n    # Dates\n    planned_start_date = db.Column(db.Date, nullable=True)\n    planned_end_date = db.Column(db.Date, nullable=True)\n    actual_start_date = db.Column(db.Date, nullable=True)\n    actual_end_date = db.Column(db.Date, nullable=True)\n    \n    # Meta\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships  \n    created_by = db.relationship('User', foreign_keys=[created_by_id], overlaps=\"created_audits,creator\")\n    assigned_department = db.relationship('Department', backref='audits')\n    findings = db.relationship('Finding', backref='audit', cascade='all, delete-orphan')\n    evidence_files = db.relationship('EvidenceFile', backref='audit', cascade='all, delete-orphan')\n    audit_responses = db.relationship('AuditResponse', backref='audit', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Audit {self.reference_number}>'\n    \n    def generate_reference_number(self):\n        year = datetime.utcnow().year\n        count = Audit.query.filter(text(\"EXTRACT(year FROM created_at) = :year\")).params(year=year).count() + 1\n        return f\"AUD-{year}-{count:04d}\"\n\nclass AuditResponse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    checklist_item_id = db.Column(db.Integer, db.ForeignKey('checklist_item.id'), nullable=False)\n    response = db.Column(db.String(20), nullable=False)  # compliant, non_compliant, not_applicable, partial\n    comments = db.Column(db.Text, nullable=True)\n    evidence_description = db.Column(db.Text, nullable=True)\n    completed_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    completed_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    checklist_item = db.relationship('ChecklistItem')\n    completed_by = db.relationship('User')\n    \n    def __repr__(self):\n        return f'<AuditResponse {self.response}>'\n\nclass Finding(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    severity = db.Column(db.String(20), nullable=False)  # low, medium, high, critical\n    category = db.Column(db.String(100), nullable=True)\n    risk_assessment = db.Column(db.Text, nullable=True)  # Risk analysis by auditor\n    recommendation = db.Column(db.Text, nullable=True)  # Auditor's recommendation\n    status = db.Column(db.String(20), default='open')  # open, in_progress, resolved, closed\n    \n    # Assignment\n    assigned_to_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    identified_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    # Dates\n    due_date = db.Column(db.Date, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    assigned_to = db.relationship('User', foreign_keys=[assigned_to_id])\n    auditee = db.relationship('User', foreign_keys=[auditee_id])\n    identified_by = db.relationship('User', foreign_keys=[identified_by_id])\n    corrective_actions = db.relationship('CorrectiveAction', backref='finding', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Finding {self.title}>'\n\nclass CorrectiveAction(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    finding_id = db.Column(db.Integer, db.ForeignKey('finding.id'), nullable=False)\n    action_description = db.Column(db.Text, nullable=False)\n    responsible_person_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    status = db.Column(db.String(20), default='planned')  # planned, in_progress, completed, overdue\n    priority = db.Column(db.String(20), default='medium')\n    \n    # Dates\n    planned_completion_date = db.Column(db.Date, nullable=False)\n    actual_completion_date = db.Column(db.Date, nullable=True)\n    \n    # Progress tracking\n    progress_percentage = db.Column(db.Integer, default=0)\n    implementation_notes = db.Column(db.Text, nullable=True)\n    \n    # Meta\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    responsible_person = db.relationship('User', foreign_keys=[responsible_person_id])\n    created_by = db.relationship('User', foreign_keys=[created_by_id])\n    \n    def __repr__(self):\n        return f'<CorrectiveAction {self.action_description[:50]}>'\n\nclass EvidenceFile(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=True)\n    finding_id = db.Column(db.Integer, db.ForeignKey('finding.id'), nullable=True)\n    filename = db.Column(db.String(255), nullable=False)\n    original_filename = db.Column(db.String(255), nullable=False)\n    file_path = db.Column(db.String(500), nullable=False)\n    file_size = db.Column(db.Integer, nullable=False)\n    file_type = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    \n    # Supervisor review fields\n    supervisor_comment = db.Column(db.Text, nullable=True)\n    supervisor_status = db.Column(db.String(50), nullable=True)  # approved, rejected, reviewed\n    reviewed_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    reviewed_at = db.Column(db.DateTime, nullable=True)\n    \n    # Meta\n    uploaded_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    uploaded_by = db.relationship('User', foreign_keys=[uploaded_by_id])\n    reviewed_by = db.relationship('User', foreign_keys=[reviewed_by_id])\n    finding = db.relationship('Finding', backref='evidence_files')\n    \n    def __repr__(self):\n        return f'<EvidenceFile {self.original_filename}>'\n\nclass AuditLog(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    action = db.Column(db.String(100), nullable=False)\n    entity_type = db.Column(db.String(50), nullable=False)  # audit, finding, user, etc.\n    entity_id = db.Column(db.Integer, nullable=True)\n    details = db.Column(db.Text, nullable=True)\n    ip_address = db.Column(db.String(45), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User')\n    \n    def __repr__(self):\n        return f'<AuditLog {self.action}>'\n\nclass AuditDocumentRequest(db.Model):\n    \"\"\"Document requests from auditor to auditee\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    requested_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    document_type = db.Column(db.String(100), nullable=False)  # policies, procedures, logs, transaction_data\n    document_description = db.Column(db.Text, nullable=False)\n    priority = db.Column(db.String(20), default='medium')\n    due_date = db.Column(db.Date, nullable=True)\n    \n    status = db.Column(db.String(20), default='pending')  # pending, provided, not_available\n    auditee_response = db.Column(db.Text, nullable=True)\n    response_date = db.Column(db.Date, nullable=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    audit = db.relationship('Audit', backref='document_requests')\n    requested_by = db.relationship('User', foreign_keys=[requested_by_id])\n    auditee = db.relationship('User', foreign_keys=[auditee_id])\n    \n    def __repr__(self):\n        return f'<AuditDocumentRequest {self.document_type}>'\n\nclass Notification(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    notification_type = db.Column(db.String(50), nullable=False)  # audit_assigned, plan_approval_needed, documents_requested, audit_due, action_overdue\n    is_read = db.Column(db.Boolean, default=False)\n    related_entity_type = db.Column(db.String(50), nullable=True)\n    related_entity_id = db.Column(db.Integer, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User', backref='notifications')\n    \n    def __repr__(self):\n        return f'<Notification {self.title}>'\n","size_bytes":16118},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":355},"replit.md":{"content":"# Audit Management System\n\n## Overview\n\nThis is a comprehensive web-based audit management system built with Flask that provides role-based access control for managing organizational audits. The system supports four distinct user roles (Admin, Supervisor, Auditor, and Auditee) with specialized workflows for audit planning, execution, findings management, and corrective action tracking.\n\nThe application focuses on streamlining the audit process from initial planning through final reporting, with emphasis on compliance tracking, document management, and audit trail maintenance. It provides dashboards, notifications, and comprehensive reporting capabilities to support effective audit management across organizations.\n\n**Recent Major Enhancement (August 2025)**: \n- Successfully migrated from Replit Agent to standard Replit environment with full compatibility\n- **Migration Complete (August 14, 2025)**: Successfully imported project into Replit environment with all dependencies installed, PostgreSQL database configured, and Flask application running on port 5000\n- **MAJOR WORKFLOW TRANSFORMATION (August 14, 2025)**: Completely restructured audit management workflow per user requirements:\n  1. Changed \"System Administrator\" to \"Director\" \n  2. Changed \"Supervisor\" to \"Head of Business Control\"\n  3. **NEW WORKFLOW**: Head of Business Control creates audit plans → Director approves plans → Head of Business Control assigns auditors\n  4. Updated database schema with new roles and workflow fields\n  5. Created dedicated Director dashboard for plan approval\n  6. Updated Head of Business Control dashboard for auditor assignment\n  7. Granted Head of Business Control user and department management capabilities\n- Implemented comprehensive Auditor and Auditee workflows with detailed process flows, role-based dashboards, finding management, corrective action tracking, and evidence upload capabilities\n- Fixed critical audit creation error and enhanced user management features\n- Resolved database configuration and session management issues\n- Added admin notification management with deletion capabilities (delete individual notifications and bulk delete all)\n- Fixed model constructor issues and improved error handling throughout the application\n- Resolved database schema conflicts and session secret key errors\n- Fixed CorrectiveAction model target_completion_date field conflicts\n- **Migration Completed**: All dashboards debugged and verified working correctly with PostgreSQL database, authentication system, and role-based access controls operational\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 for responsive UI\n- **CSS Framework**: Bootstrap 5 with custom CSS variables for role-based theming\n- **JavaScript**: Vanilla JavaScript with modular organization (main.js, dashboard.js)\n- **Client-side Features**: Chart.js for analytics, form validation, file upload handling, and real-time notifications\n\n### Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy ORM for database operations\n- **Database Model**: Relational database design with proper foreign key relationships\n- **Authentication**: Session-based authentication with role-based access control (RBAC)\n- **Authorization**: Decorator-based permission system for route protection\n- **File Management**: Secure file upload system with type validation and UUID-based naming\n\n### Core Data Models\n- **User Management**: Users with roles (director, head_of_business_control, auditor, auditee) linked to departments with contact details\n- **Organizational Structure**: Departments with dynamic units and text-based department heads\n- **Audit Workflow**: Complete audit lifecycle from assignment through completion\n- **Findings Management**: Detailed finding classification with severity levels and auditee assignment\n- **Corrective Actions**: Action plan tracking with target dates and responsible persons\n- **Evidence Management**: File upload system for supporting documentation\n- **Notification System**: Real-time notifications for workflow events\n- **Audit Trail**: Comprehensive logging system for user actions and system events\n\n### Security Implementation\n- **Password Management**: Werkzeug password hashing with auto-generated passwords for new users\n- **Session Management**: Flask sessions with configurable secret keys\n- **Access Control**: Role-based permissions with function-level authorization decorators\n- **Audit Logging**: Complete audit trail of user actions with IP address tracking\n- **File Security**: Restricted file types and secure file handling with size limits\n\n### Application Structure\n- **Modular Design**: Separate modules for authentication (auth.py), utilities (utils.py), and routes (routes.py)\n- **Role-Specific Templates**: Dedicated template directories for auditor/ and auditee/ workflows\n- **Template Inheritance**: Base template system with role-specific styling and navigation\n- **Workflow Implementation**: Complete Auditor and Auditee process flows with detailed UI\n- **Configuration Management**: Environment variable based configuration for database and secrets\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **Flask**: Web application framework\n- **Flask-SQLAlchemy**: Database ORM integration\n- **Werkzeug**: Password hashing and security utilities\n\n### Frontend Dependencies\n- **Bootstrap 5**: CSS framework for responsive design\n- **Font Awesome 6**: Icon library for UI elements\n- **Chart.js**: JavaScript charting library for dashboard analytics\n\n### Database System\n- **SQLAlchemy**: ORM with support for multiple database backends\n- **Database URL**: Configured via environment variables (DATABASE_URL)\n- **Connection Pooling**: Configured with pool recycling and pre-ping for reliability\n\n### Security and Utilities\n- **UUID**: For secure file naming and unique identifiers\n- **Secrets**: For secure password generation\n- **OS**: Environment variable management and file system operations\n\n### Production Considerations\n- **ProxyFix**: Werkzeug middleware for proper proxy header handling\n- **Logging**: Configurable logging system with debug level support\n- **Session Security**: Configurable session secrets via environment variables","size_bytes":6338},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, jsonify, send_file\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom sqlalchemy import extract\nfrom app import app, db\nfrom models import *\n# Create alias for backward compatibility\nEvidence = EvidenceFile\nfrom auth import login_required, role_required, get_current_user, log_audit_action, check_password_reset_required\nfrom utils import generate_password, save_uploaded_file, get_audit_statistics, get_user_notifications, create_notification\nfrom datetime import datetime, timedelta\nimport os\n\n@app.route('/')\ndef landing():\n    \"\"\"Landing page with role-based login options\"\"\"\n    if 'user_id' in session:\n        return redirect(url_for('dashboard'))\n    return render_template('landing.html')\n\n@app.route('/login/<role>')\ndef login_form(role):\n    \"\"\"Display login form for specific role\"\"\"\n    valid_roles = ['admin', 'auditor', 'auditee', 'supervisor']\n    if role not in valid_roles:\n        flash('Invalid role specified.', 'error')\n        return redirect(url_for('landing'))\n    return render_template('login.html', role=role)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    \"\"\"Process login\"\"\"\n    username = request.form['username']\n    password = request.form['password']\n    role = request.form['role']\n    \n    user = User.query.filter_by(username=username, role=role, is_active=True).first()\n    \n    if user and check_password_hash(user.password_hash, password):\n        session['user_id'] = user.id\n        session['user_role'] = user.role\n        user.last_login = datetime.utcnow()\n        db.session.commit()\n        \n        log_audit_action('login', 'user', user.id, f'User {username} logged in')\n        \n        # Check if password reset is required\n        if user.password_reset_required:\n            flash('You must change your password before continuing.', 'warning')\n            return redirect(url_for('change_password'))\n        \n        flash(f'Welcome, {user.full_name}!', 'success')\n        return redirect(url_for('dashboard'))\n    else:\n        flash('Invalid username, password, or role.', 'error')\n        return redirect(url_for('login_form', role=role))\n\n@app.route('/logout')\n@login_required\ndef logout():\n    \"\"\"Logout user\"\"\"\n    user = get_current_user()\n    if user:\n        log_audit_action('logout', 'user', user.id, f'User {user.username} logged out')\n    \n    session.clear()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('landing'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"Main dashboard - redirect to role-specific dashboard\"\"\"\n    user = get_current_user()\n    \n    # Check password reset requirement\n    if check_password_reset_required():\n        return redirect(url_for('change_password'))\n    \n    # Redirect to role-specific dashboard\n    if user and user.role == 'director':\n        return redirect(url_for('director_dashboard'))\n    elif user and user.role == 'auditor':\n        return redirect(url_for('auditor_dashboard'))\n    elif user and user.role == 'auditee':\n        return redirect(url_for('auditee_dashboard'))\n    elif user and user.role == 'head_of_business_control':\n        return redirect(url_for('head_of_business_control_dashboard'))\n    else:\n        flash('Invalid user or role.', 'error')\n        return redirect(url_for('logout'))\n\n@app.route('/director/dashboard')\n@role_required('director')\ndef director_dashboard():\n    \"\"\"Director dashboard with plan approval capabilities\"\"\"\n    user = get_current_user()\n    \n    # Get all audits for organization overview\n    all_audits = Audit.query.all()\n    \n    # Get audit plans pending director approval\n    plans_pending_approval = Audit.query.filter_by(\n        status='plan_pending_director_approval'\n    ).order_by(Audit.plan_submitted_at.desc()).all()\n    \n    # Get recently approved plans\n    recently_approved = Audit.query.filter(\n        Audit.director_approved_at.isnot(None)\n    ).order_by(Audit.director_approved_at.desc()).limit(10).all()\n    \n    # Statistics\n    total_audits_count = len(all_audits)\n    plans_pending_count = len(plans_pending_approval)\n    approved_plans_count = len([a for a in all_audits if a.director_approved_at])\n    active_audits_count = len([a for a in all_audits if a.status in ['auditor_assigned', 'in_progress']])\n    \n    # Get recent activities\n    recent_activities = AuditLog.query.order_by(AuditLog.created_at.desc()).limit(10).all()\n    \n    return render_template('director/dashboard.html',\n                         user=user,\n                         all_audits=all_audits,\n                         plans_pending_approval=plans_pending_approval,\n                         recently_approved=recently_approved,\n                         total_audits_count=total_audits_count,\n                         plans_pending_count=plans_pending_count,\n                         approved_plans_count=approved_plans_count,\n                         active_audits_count=active_audits_count,\n                         recent_activities=recent_activities)\n\n@app.route('/auditor/dashboard')\n@role_required('auditor')\ndef auditor_dashboard():\n    \"\"\"Auditor dashboard with comprehensive statistics\"\"\"\n    user = get_current_user()\n    today = datetime.utcnow().date()\n    \n    # Get auditor-specific statistics\n    if not user:\n        return redirect(url_for('login_form', role='auditor'))\n    \n    assigned_audits = Audit.query.filter_by(auditor_id=user.id).count()\n    in_progress_audits = Audit.query.filter_by(auditor_id=user.id, status='in_progress').count()\n    completed_audits = Audit.query.filter_by(auditor_id=user.id, status='completed').count()\n    overdue_audits = Audit.query.filter(\n        Audit.auditor_id == user.id,\n        Audit.planned_end_date < today,\n        Audit.status.in_(['draft', 'in_progress'])\n    ).count()\n    \n    stats = {\n        'assigned_audits': assigned_audits,\n        'in_progress_audits': in_progress_audits,\n        'completed_audits': completed_audits,\n        'overdue_audits': overdue_audits\n    }\n    \n    # Recent audit assignments\n    recent_audits = Audit.query.filter_by(auditor_id=user.id).order_by(Audit.created_at.desc()).limit(5).all()\n    \n    # Recent findings created by auditor\n    recent_findings = Finding.query.join(Audit).filter(\n        Audit.auditor_id == user.id\n    ).order_by(Finding.created_at.desc()).limit(10).all()\n    \n    # Pending actions (simplified for now)\n    pending_actions = []\n    \n    return render_template('auditor/dashboard.html', \n                         stats=stats, recent_audits=recent_audits, \n                         recent_findings=recent_findings,\n                         pending_actions=pending_actions, today=today)\n\n@app.route('/auditee/dashboard')\n@role_required('auditee')\ndef auditee_dashboard():\n    \"\"\"Auditee dashboard with comprehensive statistics\"\"\"\n    user = get_current_user()\n    today = datetime.utcnow().date()\n    \n    # Get auditee-specific statistics\n    if not user:\n        return redirect(url_for('login_form', role='auditee'))\n    \n    active_audits = Audit.query.filter_by(auditee_id=user.id, status='in_progress').count()\n    pending_findings = Finding.query.filter_by(auditee_id=user.id, status='open').count()\n    overdue_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.planned_completion_date < today,\n        CorrectiveAction.status.in_(['planned', 'in_progress'])\n    ).count()\n    completed_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.status == 'completed'\n    ).count()\n    \n    stats = {\n        'active_audits': active_audits,\n        'pending_findings': pending_findings,\n        'overdue_actions': overdue_actions,\n        'completed_actions': completed_actions\n    }\n    \n    # Recent findings\n    recent_findings = Finding.query.filter_by(auditee_id=user.id).order_by(Finding.created_at.desc()).limit(5).all()\n    \n    # Urgent actions\n    urgent_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.planned_completion_date <= today + timedelta(days=7),\n        CorrectiveAction.status.in_(['planned', 'in_progress'])\n    ).limit(5).all()\n    \n    return render_template('auditee/dashboard.html', \n                         stats=stats, recent_findings=recent_findings, \n                         urgent_actions=urgent_actions, today=today)\n\n@app.route('/head-of-business-control/dashboard')\n@role_required('head_of_business_control')\ndef head_of_business_control_dashboard():\n    \"\"\"Head of Business Control dashboard with auditor assignment and evidence review\"\"\"\n    user = get_current_user()\n    \n    # Get supervised audits\n    supervised_audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    \n    # Get audits awaiting auditor assignment (director approved, need auditor)\n    awaiting_assignment = Audit.query.filter_by(\n        supervisor_id=user.id, \n        status='pending_auditor_assignment'\n    ).filter(Audit.director_approved_at.isnot(None)).order_by(Audit.director_approved_at.desc()).all()\n    \n    # Get evidence pending review\n    pending_evidence = EvidenceFile.query.join(Finding).join(Audit).filter(\n        Audit.supervisor_id == user.id,\n        EvidenceFile.supervisor_status.is_(None)\n    ).all()\n    \n    # Get recent activities \n    recent_activities = AuditLog.query.filter(\n        AuditLog.entity_type == 'evidence'\n    ).order_by(AuditLog.created_at.desc()).limit(10).all()\n    \n    context = {\n        'user': user,\n        'supervised_audits': supervised_audits,\n        'supervised_audits_count': len(supervised_audits),\n        'awaiting_assignment': awaiting_assignment,\n        'awaiting_assignment_count': len(awaiting_assignment),\n        'active_audits_count': len([a for a in supervised_audits if a.status in ['auditor_assigned', 'in_progress']]),\n        'pending_evidence': pending_evidence,\n        'pending_evidence_count': len(pending_evidence),\n        'completed_reviews_count': EvidenceFile.query.join(Finding).join(Audit).filter(\n            Audit.supervisor_id == user.id,\n            EvidenceFile.supervisor_status.isnot(None)\n        ).count(),\n        'recent_activities': recent_activities\n    }\n    \n    return render_template('head_of_business_control/dashboard.html', **context)\n\n@app.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change password\"\"\"\n    user = get_current_user()\n    \n    if request.method == 'POST':\n        current_password = request.form['current_password']\n        new_password = request.form['new_password']\n        confirm_password = request.form['confirm_password']\n        \n        # Validate current password\n        if not check_password_hash(user.password_hash, current_password):\n            flash('Current password is incorrect.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        # Validate new password\n        if new_password != confirm_password:\n            flash('New passwords do not match.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        if len(new_password) < 8:\n            flash('Password must be at least 8 characters long.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        # Update password\n        user.password_hash = generate_password_hash(new_password)\n        user.password_reset_required = False\n        db.session.commit()\n        \n        log_audit_action('password_change', 'user', user.id, 'User changed password')\n        flash('Password changed successfully.', 'success')\n        return redirect(url_for('dashboard'))\n    \n    return render_template('profile.html', user=user, change_password=True)\n\n@app.route('/profile')\n@login_required\ndef profile():\n    \"\"\"User profile\"\"\"\n    user = get_current_user()\n    notifications = get_user_notifications(user.id)\n    return render_template('profile.html', user=user, notifications=notifications)\n\n# Admin Routes\n@app.route('/admin/users')\n@role_required('admin')\ndef admin_users():\n    \"\"\"Manage users\"\"\"\n    users = User.query.all()\n    departments = Department.query.filter_by(is_active=True).all()\n    return render_template('admin/users.html', users=users, departments=departments)\n\n@app.route('/admin/users/create', methods=['POST'])\n@role_required('admin')\ndef create_user():\n    \"\"\"Create new user\"\"\"\n    username = request.form['username']\n    email = request.form['email']\n    first_name = request.form['first_name']\n    last_name = request.form['last_name']\n    role = request.form['role']\n    department_id = request.form.get('department_id') or None\n    \n    # Check if user exists\n    if User.query.filter_by(username=username).first():\n        flash('Username already exists.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    if User.query.filter_by(email=email).first():\n        flash('Email already exists.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    # Generate auto password\n    auto_password = generate_password()\n    \n    # Get contact details\n    phone = request.form.get('phone', '')\n    address = request.form.get('address', '')\n    \n    user = User()\n    user.username = username\n    user.email = email\n    user.first_name = first_name\n    user.last_name = last_name\n    user.role = role\n    user.phone = phone\n    user.address = address\n    user.department_id = department_id\n    user.password_hash = generate_password_hash(auto_password)\n    user.password_reset_required = True\n    \n    db.session.add(user)\n    db.session.commit()\n    \n    log_audit_action('create_user', 'user', user.id, f'Created user {username}')\n    \n    # Create notification for admin about the generated password\n    from utils import create_notification\n    admin_user = get_current_user()\n    create_notification(\n        user_id=admin_user.id,\n        title=f'User Created: {username}',\n        message=f'New user {first_name} {last_name} created with auto-generated password: {auto_password}',\n        notification_type='user_created'\n    )\n    \n    flash(f'User created successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/users/<int:user_id>/toggle-status', methods=['POST'])\n@role_required('admin')\ndef toggle_user_status(user_id):\n    \"\"\"Toggle user active status\"\"\"\n    user = User.query.get_or_404(user_id)\n    user.is_active = not user.is_active\n    db.session.commit()\n    \n    action = 'activate_user' if user.is_active else 'deactivate_user'\n    log_audit_action(action, 'user', user.id, f'User {user.username} {\"activated\" if user.is_active else \"deactivated\"}')\n    \n    flash(f'User {\"activated\" if user.is_active else \"deactivated\"} successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])\n@role_required('admin')\ndef delete_user(user_id):\n    \"\"\"Delete user\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    # Prevent deleting admin user\n    if user.role == 'admin':\n        flash('Cannot delete admin user.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    username = user.username\n    db.session.delete(user)\n    db.session.commit()\n    \n    log_audit_action('delete_user', 'user', user_id, f'Deleted user {username}')\n    flash(f'User {username} deleted successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/departments')\n@role_required('admin')\ndef admin_departments():\n    \"\"\"Manage departments\"\"\"\n    departments = Department.query.all()\n    return render_template('admin/departments.html', departments=departments)\n\n@app.route('/admin/departments/create', methods=['POST'])\n@role_required('admin')\ndef create_department():\n    \"\"\"Create new department\"\"\"\n    name = request.form['name']\n    description = request.form.get('description', '')\n    head_name = request.form.get('head_name', '')\n    \n    if Department.query.filter_by(name=name).first():\n        flash('Department name already exists.', 'error')\n        return redirect(url_for('admin_departments'))\n    \n    department = Department()\n    department.name = name\n    department.description = description\n    department.head_name = head_name\n    \n    db.session.add(department)\n    db.session.commit()\n    \n    # Add department units if provided\n    unit_names = request.form.getlist('unit_names[]')\n    unit_descriptions = request.form.getlist('unit_descriptions[]')\n    \n    for i, unit_name in enumerate(unit_names):\n        if unit_name.strip():\n            unit = DepartmentUnit()\n            unit.name = unit_name.strip()\n            unit.description = unit_descriptions[i].strip() if i < len(unit_descriptions) else ''\n            unit.department_id = department.id\n            db.session.add(unit)\n    \n    db.session.commit()\n    \n    log_audit_action('create_department', 'department', department.id, f'Created department {name}')\n    flash('Department created successfully.', 'success')\n    return redirect(url_for('admin_departments'))\n\n@app.route('/admin/departments/<int:department_id>/delete', methods=['POST'])\n@role_required('admin')\ndef delete_department(department_id):\n    \"\"\"Delete department\"\"\"\n    department = Department.query.get_or_404(department_id)\n    \n    # Check if department has users\n    if department.users:\n        flash('Cannot delete department with assigned users.', 'error')\n        return redirect(url_for('admin_departments'))\n    \n    department_name = department.name\n    db.session.delete(department)\n    db.session.commit()\n    \n    log_audit_action('delete_department', 'department', department_id, f'Deleted department {department_name}')\n    flash(f'Department {department_name} deleted successfully.', 'success')\n    return redirect(url_for('admin_departments'))\n\n# Audit Routes\n@app.route('/audits')\n@login_required\ndef audit_list():\n    \"\"\"List audits based on user role\"\"\"\n    user = get_current_user()\n    \n    # Filter audits based on role\n    if user.role == 'admin':\n        audits = Audit.query.all()\n    elif user.role == 'auditor':\n        audits = Audit.query.filter_by(auditor_id=user.id).all()\n    elif user.role == 'auditee':\n        audits = Audit.query.filter_by(auditee_id=user.id).all()\n    elif user.role == 'supervisor':\n        audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    else:\n        audits = []\n    \n    return render_template('audits/list.html', audits=audits, user=user)\n\n@app.route('/audits/create', methods=['GET', 'POST'])\n@role_required('head_of_business_control')\ndef create_audit():\n    \"\"\"Create new audit with comprehensive workflow (Phase 1: Audit Assignment)\"\"\"\n    if request.method == 'POST':\n        # Basic audit information\n        title = request.form['title']\n        description = request.form.get('description', '')\n        audit_type = request.form['audit_type']\n        priority = request.form['priority']\n        auditor_id = request.form['auditor_id']\n        auditee_id = request.form.get('auditee_id') or None\n        supervisor_id = request.form.get('supervisor_id') or None\n        department_id = request.form.get('department_id') or None\n        planned_start_date = datetime.strptime(request.form['planned_start_date'], '%Y-%m-%d').date()\n        planned_end_date = datetime.strptime(request.form['planned_end_date'], '%Y-%m-%d').date()\n        \n        # Phase 1 - Audit scope and objectives\n        audit_scope = request.form.get('audit_scope', '')\n        audit_objectives = request.form.get('audit_objectives', '')\n        audit_criteria = request.form.get('audit_criteria', '')\n        resources_needed = request.form.get('resources_needed', '')\n        \n        # Generate reference number\n        year = datetime.utcnow().year\n        count = Audit.query.filter(extract('year', Audit.created_at) == year).count() + 1\n        reference_number = f\"AUD-{year}-{count:04d}\"\n        \n        audit = Audit()\n        audit.reference_number = reference_number\n        audit.title = title\n        audit.description = description\n        audit.audit_type = audit_type\n        audit.priority = priority\n        audit.auditor_id = None  # Will be assigned after director approval\n        audit.auditee_id = auditee_id\n        audit.supervisor_id = get_current_user().id  # Head of Business Control creating the plan\n        audit.director_id = 1  # Assuming director has ID 1, you can make this dynamic\n        audit.department_id = department_id\n        audit.planned_start_date = planned_start_date\n        audit.planned_end_date = planned_end_date\n        audit.audit_scope = audit_scope\n        audit.audit_objectives = audit_objectives\n        audit.audit_criteria = audit_criteria\n        audit.resources_needed = resources_needed\n        audit.status = 'plan_pending_director_approval'  # Head of Business Control submits plan to Director\n        audit.created_by_id = get_current_user().id\n        \n        db.session.add(audit)\n        db.session.commit()\n        \n        log_audit_action('create_audit', 'audit', audit.id, f'Created audit {reference_number} with scope and objectives')\n        \n        # Mark plan as submitted to Director\n        audit.plan_submitted_at = datetime.utcnow()\n        audit.audit_plan = f\"\"\"Audit Plan for {title}\n\nSCOPE:\n{audit_scope}\n\nOBJECTIVES:\n{audit_objectives}\n\nCRITERIA:\n{audit_criteria}\n\nRESOURCES NEEDED:\n{resources_needed}\n\nThis plan is submitted for Director approval.\"\"\"\n        \n        # Create notification for Director (Phase 1 complete)\n        notification_message = f\"\"\"New audit plan submitted for your approval: {title}\n\nPlan Details:\n- Reference: {reference_number}\n- Submitted by: {user.full_name} (Head of Business Control)\n- Type: {audit_type}\n- Priority: {priority.upper()}\n- Planned Start: {planned_start_date.strftime('%B %d, %Y')}\n- Planned End: {planned_end_date.strftime('%B %d, %Y')}\n\nScope: {audit_scope[:100]}...\nObjectives: {audit_objectives[:100]}...\n\nPlease review and approve this audit plan.\"\"\"\n        \n        create_notification(\n            director.id,\n            'New Audit Plan - Director Approval Required',\n            notification_message,\n            'plan_approval_required',\n            'audit',\n            audit.id\n        )\n        \n        # Notify auditee if assigned\n        if auditee_id:\n            auditee_message = f\"\"\"You have been designated as the primary auditee for audit: {title}\n\nReference: {reference_number}\nAuditor: {User.query.get(auditor_id).full_name}\nPlanned Period: {planned_start_date.strftime('%B %d, %Y')} - {planned_end_date.strftime('%B %d, %Y')}\n\nThe auditor will contact you with document requests and coordination details.\"\"\"\n            \n            create_notification(\n                auditee_id,\n                'Audit Assignment Notification',\n                auditee_message,\n                'audit_assigned',\n                'audit',\n                audit.id\n            )\n        \n        flash(f'Audit plan {reference_number} submitted to Director for approval!', 'success')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # GET request - show comprehensive form\n    auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    supervisors = User.query.filter_by(role='supervisor', is_active=True).all()\n    departments = Department.query.filter_by(is_active=True).all()\n    \n    return render_template('audits/create_comprehensive.html',\n                         auditors=auditors,\n                         auditees=auditees,\n                         supervisors=supervisors,\n                         departments=departments)\n\n\n# New Workflow Routes for Director and Head of Business Control\n\n@app.route('/director/approve-plan/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('director')\ndef director_approve_plan(audit_id):\n    \"\"\"Director approves or rejects audit plans\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    # Verify this audit is pending director approval\n    if audit.status != 'plan_pending_director_approval':\n        flash('This audit plan is not pending director approval.', 'error')\n        return redirect(url_for('director_dashboard'))\n    \n    if request.method == 'POST':\n        decision = request.form.get('decision')\n        director_feedback = request.form.get('director_feedback', '').strip()\n        user = get_current_user()\n        \n        if decision == 'approve':\n            # Approve the plan\n            audit.status = 'pending_auditor_assignment'\n            audit.director_approved_at = datetime.utcnow()\n            audit.director_feedback = director_feedback if director_feedback else 'Plan approved by Director'\n            \n            db.session.commit()\n            \n            # Notify Head of Business Control\n            notification_message = f\"\"\"Audit plan approved: {audit.title}\n\nYour audit plan \"{audit.title}\" has been approved by the Director.\n\nPlan Details:\n- Reference: {audit.reference_number}\n- Approved: {datetime.utcnow().strftime('%B %d, %Y at %I:%M %p')}\n- Director Feedback: {director_feedback if director_feedback else 'No additional feedback provided'}\n\nNext Step: Please assign an auditor to this approved plan.\"\"\"\n            \n            head_of_business_control = User.query.get(audit.supervisor_id)\n            if head_of_business_control:\n                create_notification(\n                    head_of_business_control.id,\n                    'Audit Plan Approved - Assign Auditor',\n                    notification_message,\n                    'plan_approved',\n                    'audit',\n                    audit.id\n                )\n            \n            log_audit_action('approve_plan', 'audit', audit.id, f'Director approved audit plan {audit.reference_number}')\n            flash(f'Audit plan {audit.reference_number} approved successfully!', 'success')\n            \n        elif decision == 'reject':\n            # Reject the plan\n            audit.status = 'plan_changes_requested'\n            audit.director_feedback = director_feedback if director_feedback else 'Changes requested by Director'\n            \n            db.session.commit()\n            \n            # Notify Head of Business Control\n            notification_message = f\"\"\"Changes requested for audit plan: {audit.title}\n\nThe Director has requested changes to your audit plan \"{audit.title}\".\n\nPlan Details:\n- Reference: {audit.reference_number}\n- Status: Changes Requested\n- Director Feedback: {director_feedback if director_feedback else 'Please review and revise the plan'}\n\nNext Step: Please revise the audit plan and resubmit for approval.\"\"\"\n            \n            head_of_business_control = User.query.get(audit.supervisor_id)\n            if head_of_business_control:\n                create_notification(\n                    head_of_business_control.id,\n                    'Audit Plan - Changes Requested',\n                    notification_message,\n                    'plan_changes_requested',\n                    'audit',\n                    audit.id\n                )\n            \n            log_audit_action('reject_plan', 'audit', audit.id, f'Director requested changes for audit plan {audit.reference_number}')\n            flash(f'Changes requested for audit plan {audit.reference_number}.', 'warning')\n        \n        return redirect(url_for('director_dashboard'))\n    \n    # GET request - show plan review page\n    return render_template('director/review_plan.html', audit=audit)\n\n\n@app.route('/head-of-business-control/assign-auditor/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('head_of_business_control')\ndef head_of_business_control_assign_auditor(audit_id):\n    \"\"\"Head of Business Control assigns auditor to approved plans\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    # Verify this audit is ready for auditor assignment\n    if audit.status != 'pending_auditor_assignment' or not audit.director_approved_at:\n        flash('This audit is not ready for auditor assignment.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # Verify user has permission to assign auditors for this audit\n    user = get_current_user()\n    if audit.supervisor_id != user.id:\n        flash('You do not have permission to assign auditors for this audit.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    if request.method == 'POST':\n        auditor_id = request.form.get('auditor_id')\n        assignment_notes = request.form.get('assignment_notes', '').strip()\n        \n        if not auditor_id:\n            flash('Please select an auditor.', 'error')\n            return redirect(request.url)\n        \n        auditor = User.query.get(auditor_id)\n        if not auditor or auditor.role != 'auditor':\n            flash('Invalid auditor selected.', 'error')\n            return redirect(request.url)\n        \n        # Assign auditor\n        audit.auditor_id = auditor_id\n        audit.status = 'auditor_assigned'\n        audit.auditor_assigned_at = datetime.utcnow()\n        audit.assignment_notes = assignment_notes\n        \n        db.session.commit()\n        \n        # Notify auditor\n        notification_message = f\"\"\"You have been assigned to audit: {audit.title}\n\nAudit Assignment Details:\n- Reference: {audit.reference_number}\n- Assigned by: {user.full_name} (Head of Business Control)\n- Type: {audit.audit_type.replace('_', ' ').title()}\n- Priority: {audit.priority.upper()}\n- Planned Start: {audit.planned_start_date.strftime('%B %d, %Y') if audit.planned_start_date else 'TBD'}\n- Planned End: {audit.planned_end_date.strftime('%B %d, %Y') if audit.planned_end_date else 'TBD'}\n\nDirector Approval: {audit.director_approved_at.strftime('%B %d, %Y') if audit.director_approved_at else 'N/A'}\n\nAssignment Notes: {assignment_notes if assignment_notes else 'No additional notes provided'}\n\nPlease review the audit plan and begin your audit activities.\"\"\"\n        \n        create_notification(\n            auditor.id,\n            'New Audit Assignment - Action Required',\n            notification_message,\n            'audit_assigned',\n            'audit',\n            audit.id\n        )\n        \n        # Notify auditee\n        if audit.auditee:\n            auditee_message = f\"\"\"Audit notification: {audit.title}\n\nYou have been assigned as the auditee for the audit \"{audit.title}\".\n\nAudit Details:\n- Reference: {audit.reference_number}\n- Auditor: {auditor.full_name}\n- Type: {audit.audit_type.replace('_', ' ').title()}\n- Priority: {audit.priority.upper()}\n- Planned Timeline: {audit.planned_start_date.strftime('%B %d, %Y') if audit.planned_start_date else 'TBD'} - {audit.planned_end_date.strftime('%B %d, %Y') if audit.planned_end_date else 'TBD'}\n\nPlease prepare for the upcoming audit and coordinate with the assigned auditor.\"\"\"\n            \n            create_notification(\n                audit.auditee.id,\n                'Audit Assignment - Auditee Notification',\n                auditee_message,\n                'auditee_assigned',\n                'audit',\n                audit.id\n            )\n        \n        log_audit_action('assign_auditor', 'audit', audit.id, f'Head of Business Control assigned auditor {auditor.full_name} to audit {audit.reference_number}')\n        flash(f'Auditor {auditor.full_name} assigned to audit {audit.reference_number} successfully!', 'success')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # GET request - show auditor assignment page\n    available_auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    return render_template('head_of_business_control/assign_auditor.html', audit=audit, available_auditors=available_auditors)\n\n@app.route('/audits/<int:audit_id>')\n@login_required\ndef audit_detail(audit_id):\n    \"\"\"View audit details\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id]:\n        flash('You do not have permission to view this audit.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    return render_template('audits/execute.html', audit=audit, user=user)\n\n@app.route('/audits/<int:audit_id>/findings')\n@login_required\ndef audit_findings(audit_id):\n    \"\"\"View audit findings\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id]:\n        flash('You do not have permission to view this audit.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    return render_template('audits/findings.html', audit=audit, findings=findings, user=user)\n\n@app.route('/findings/<int:finding_id>/actions')\n@login_required\ndef finding_actions(finding_id):\n    \"\"\"View corrective actions for a finding\"\"\"\n    finding = Finding.query.get_or_404(finding_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    audit = finding.audit\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id, finding.assigned_to_id]:\n        flash('You do not have permission to view this finding.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    users = User.query.filter_by(is_active=True).all()\n    \n    return render_template('audits/actions.html', finding=finding, actions=actions, users=users, user=user)\n\n@app.route('/api/notifications/<int:notification_id>/mark-read', methods=['POST'])\n@login_required\ndef mark_notification_read(notification_id):\n    \"\"\"Mark notification as read\"\"\"\n    notification = Notification.query.get_or_404(notification_id)\n    user = get_current_user()\n    \n    if notification.user_id != user.id:\n        return jsonify({'error': 'Unauthorized'}), 403\n    \n    notification.is_read = True\n    db.session.commit()\n    \n    return jsonify({'success': True})\n\n@app.route('/api/notifications/count')\n@login_required\ndef get_notification_count():\n    \"\"\"Get unread notification count for current user\"\"\"\n    user = get_current_user()\n    count = Notification.query.filter_by(user_id=user.id, is_read=False).count()\n    return jsonify({'count': count})\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('base.html', error_message='Page not found'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('base.html', error_message='Internal server error'), 500\n\n# Auditor workflow routes\n@app.route('/auditor/audits')\n@role_required('auditor')\ndef auditor_audits():\n    \"\"\"Auditor's audit list view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(auditor_id=user.id).order_by(Audit.created_at.desc()).all()\n    \n    return render_template('auditor/audits.html', audits=audits)\n\n@app.route('/auditor/audit/<int:audit_id>')\n@role_required('auditor')\ndef auditor_audit_detail(audit_id):\n    \"\"\"Auditor's detailed audit view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    # Get checklist items through template relationship\n    checklist_items = []\n    if hasattr(audit, 'template') and audit.template:\n        checklist_items = audit.template.checklist_items\n    evidence = EvidenceFile.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('auditor/audit_detail_comprehensive.html', \n                         audit=audit, findings=findings, \n                         checklist_items=checklist_items, evidence=evidence)\n\n# Phase 2: Auditor Preparation Routes\n@app.route('/auditor/audit/<int:audit_id>/acknowledge', methods=['POST'])\n@role_required('auditor')\ndef auditor_acknowledge_audit(audit_id):\n    \"\"\"Phase 2: Auditor acknowledges the audit assignment\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status != 'assigned':\n        flash('This audit has already been acknowledged or is in a different state.', 'warning')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Acknowledge the audit\n    audit.auditor_acknowledged_at = datetime.utcnow()\n    audit.status = 'acknowledged'\n    db.session.commit()\n    \n    log_audit_action('acknowledge_audit', 'audit', audit.id, f'Auditor acknowledged audit {audit.reference_number}')\n    \n    # Notify supervisor of acknowledgment\n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Acknowledged by Auditor',\n            f'Auditor {user.full_name} has acknowledged audit {audit.reference_number} - {audit.title}. They can now proceed with preparation.',\n            'audit_acknowledged',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit acknowledged successfully. You can now begin your preparation and planning.', 'success')\n    return redirect(url_for('auditor_prepare_plan', audit_id=audit_id))\n\n@app.route('/auditor/audit/<int:audit_id>/prepare')\n@role_required('auditor')\ndef auditor_prepare_plan(audit_id):\n    \"\"\"Phase 2: Auditor preparation and planning interface\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status not in ['acknowledged', 'plan_submitted']:\n        flash('You must acknowledge the audit first before preparing the plan.', 'warning')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Get previous audits in same department for reference\n    previous_audits = []\n    if audit.department_id:\n        previous_audits = Audit.query.filter(\n            Audit.department_id == audit.department_id,\n            Audit.id != audit.id,\n            Audit.status.in_(['closed', 'review'])\n        ).order_by(Audit.created_at.desc()).limit(5).all()\n    \n    return render_template('auditor/prepare_plan.html', audit=audit, previous_audits=previous_audits)\n\n@app.route('/auditor/audit/<int:audit_id>/submit-plan', methods=['POST'])\n@role_required('auditor')\ndef auditor_submit_plan(audit_id):\n    \"\"\"Phase 2: Auditor submits prepared audit plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status not in ['acknowledged', 'plan_submitted']:\n        flash('Invalid audit status for plan submission.', 'error')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Extract plan details\n    audit_plan = request.form['audit_plan']\n    audit_methodology = request.form['audit_methodology']\n    audit_checklist = request.form['audit_checklist']\n    data_request_list = request.form.get('data_request_list', '')\n    \n    # Validate required fields\n    if not audit_plan or not audit_methodology:\n        flash('Audit plan and methodology are required.', 'error')\n        return redirect(url_for('auditor_prepare_plan', audit_id=audit_id))\n    \n    # Update audit with plan details\n    audit.audit_plan = audit_plan\n    audit.audit_methodology = audit_methodology\n    audit.audit_checklist = audit_checklist\n    audit.data_request_list = data_request_list\n    audit.plan_submitted_at = datetime.utcnow()\n    audit.status = 'plan_submitted'\n    \n    db.session.commit()\n    \n    log_audit_action('submit_audit_plan', 'audit', audit.id, f'Auditor submitted plan for audit {audit.reference_number}')\n    \n    # Notify supervisor for approval\n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Plan Ready for Review',\n            f'Auditor {user.full_name} has submitted the audit plan for {audit.reference_number} - {audit.title}. Please review and approve.',\n            'plan_approval_needed',\n            'audit',\n            audit.id\n        )\n    \n    # Create document requests for auditee if specified\n    if data_request_list and audit.auditee_id:\n        document_requests = data_request_list.split('\\n')\n        for req in document_requests:\n            if req.strip():\n                doc_request = AuditDocumentRequest()\n                doc_request.audit_id = audit.id\n                doc_request.requested_by_id = user.id\n                doc_request.auditee_id = audit.auditee_id\n                doc_request.document_type = 'general'\n                doc_request.document_description = req.strip()\n                doc_request.priority = audit.priority\n                doc_request.due_date = audit.planned_start_date\n                db.session.add(doc_request)\n        \n        db.session.commit()\n        \n        # Notify auditee of document requests\n        create_notification(\n            audit.auditee_id,\n            'Document Requests for Upcoming Audit',\n            f'The auditor has requested documents for audit {audit.reference_number} - {audit.title}. Please check your document requests and respond accordingly.',\n            'documents_requested',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit plan submitted successfully and sent for supervisor approval. Document requests have been sent to the auditee.', 'success')\n    return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n\n# Phase 3: Supervisor Approval Routes\n@app.route('/supervisor/audit/<int:audit_id>/review-plan')\n@role_required('supervisor')\ndef supervisor_review_plan(audit_id):\n    \"\"\"Phase 3: Supervisor reviews auditor's submitted plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    \n    if audit.status != 'plan_submitted':\n        flash('This audit plan has not been submitted or is in a different state.', 'warning')\n        return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n    \n    return render_template('supervisor/review_plan.html', audit=audit)\n\n@app.route('/supervisor/audit/<int:audit_id>/approve-plan', methods=['POST'])\n@role_required('supervisor')\ndef supervisor_approve_plan(audit_id):\n    \"\"\"Phase 3: Supervisor approves or requests changes to audit plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    \n    if audit.status != 'plan_submitted':\n        flash('This audit plan cannot be approved at this time.', 'error')\n        return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n    \n    action = request.form['action']  # approve or request_changes\n    supervisor_feedback = request.form.get('supervisor_feedback', '')\n    \n    if action == 'approve':\n        audit.plan_approved_at = datetime.utcnow()\n        audit.status = 'plan_approved'\n        audit.supervisor_feedback = supervisor_feedback\n        \n        db.session.commit()\n        \n        log_audit_action('approve_audit_plan', 'audit', audit.id, f'Supervisor approved plan for audit {audit.reference_number}')\n        \n        # Notify auditor of approval\n        create_notification(\n            audit.auditor_id,\n            'Audit Plan Approved - Ready to Begin',\n            f'Your audit plan for {audit.reference_number} - {audit.title} has been approved by the supervisor. You may now coordinate with the auditee and begin fieldwork.',\n            'plan_approved',\n            'audit',\n            audit.id\n        )\n        \n        flash('Audit plan approved successfully. Auditor has been notified and can begin fieldwork.', 'success')\n        \n    else:  # request_changes\n        audit.status = 'acknowledged'  # Back to preparation phase\n        audit.supervisor_feedback = supervisor_feedback\n        \n        db.session.commit()\n        \n        log_audit_action('request_plan_changes', 'audit', audit.id, f'Supervisor requested changes to plan for audit {audit.reference_number}')\n        \n        # Notify auditor of requested changes\n        create_notification(\n            audit.auditor_id,\n            'Audit Plan Requires Revision',\n            f'Your audit plan for {audit.reference_number} - {audit.title} requires revision. Please review the supervisor feedback and resubmit.',\n            'plan_revision_requested',\n            'audit',\n            audit.id\n        )\n        \n        flash('Feedback provided to auditor. They will revise and resubmit the plan.', 'info')\n    \n    return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n\n# Auditee Coordination Routes\n@app.route('/auditee/document-requests')\n@role_required('auditee')\ndef auditee_document_requests():\n    \"\"\"View all document requests for auditee\"\"\"\n    user = get_current_user()\n    document_requests = AuditDocumentRequest.query.filter_by(auditee_id=user.id).order_by(\n        AuditDocumentRequest.created_at.desc()\n    ).all()\n    \n    return render_template('auditee/document_requests.html', document_requests=document_requests)\n\n@app.route('/auditee/document-request/<int:request_id>/respond', methods=['POST'])\n@role_required('auditee')\ndef auditee_respond_document_request(request_id):\n    \"\"\"Auditee responds to document request\"\"\"\n    user = get_current_user()\n    doc_request = AuditDocumentRequest.query.filter_by(id=request_id, auditee_id=user.id).first_or_404()\n    \n    response_type = request.form['response_type']  # provided, not_available\n    auditee_response = request.form['auditee_response']\n    \n    doc_request.status = response_type\n    doc_request.auditee_response = auditee_response\n    doc_request.response_date = datetime.utcnow().date()\n    \n    db.session.commit()\n    \n    log_audit_action('respond_document_request', 'audit_document_request', doc_request.id, \n                     f'Auditee responded to document request: {response_type}')\n    \n    # Notify auditor of response\n    create_notification(\n        doc_request.requested_by_id,\n        'Document Request Response Received',\n        f'Auditee has responded to your document request for {doc_request.document_type}: {response_type.replace(\"_\", \" \").title()}',\n        'document_response',\n        'audit',\n        doc_request.audit_id\n    )\n    \n    flash('Response submitted successfully. The auditor has been notified.', 'success')\n    return redirect(url_for('auditee_document_requests'))\n\n@app.route('/auditee/audit/<int:audit_id>/acknowledge', methods=['POST'])\n@role_required('auditee')\ndef auditee_acknowledge_audit(audit_id):\n    \"\"\"Auditee acknowledges audit notification and coordination\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditee_id=user.id).first_or_404()\n    \n    audit.auditee_acknowledged_at = datetime.utcnow()\n    access_arrangements = request.form.get('access_arrangements', 'off') == 'on'\n    audit.access_arrangements_completed = access_arrangements\n    \n    db.session.commit()\n    \n    log_audit_action('acknowledge_audit_auditee', 'audit', audit.id, f'Auditee acknowledged audit {audit.reference_number}')\n    \n    # Notify auditor and supervisor\n    notification_message = f'Auditee {user.full_name} has acknowledged audit {audit.reference_number} - {audit.title} and confirmed access arrangements.'\n    \n    if audit.auditor_id:\n        create_notification(\n            audit.auditor_id,\n            'Auditee Ready for Audit',\n            notification_message,\n            'auditee_ready',\n            'audit',\n            audit.id\n        )\n    \n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Coordination Complete',\n            notification_message,\n            'coordination_complete',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit acknowledged successfully. Access arrangements confirmed.', 'success')\n    return redirect(url_for('auditee_dashboard'))\n\n@app.route('/auditor/audit/<int:audit_id>/start', methods=['POST'])\n@role_required('auditor')\ndef auditor_start_audit(audit_id):\n    \"\"\"Start audit execution\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status == 'draft':\n        audit.status = 'in_progress'\n        audit.actual_start_date = datetime.utcnow().date()\n        db.session.commit()\n        \n        log_audit_action('start_audit', 'audit', audit.id, f'Started audit {audit.id}')\n        flash('Audit started successfully!', 'success')\n    \n    return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n\n@app.route('/auditor/findings')\n@role_required('auditor')\ndef auditor_findings():\n    \"\"\"Auditor's findings management\"\"\"\n    user = get_current_user()\n    findings = Finding.query.join(Audit).filter(Audit.auditor_id == user.id).order_by(Finding.created_at.desc()).all()\n    \n    return render_template('auditor/findings.html', findings=findings)\n\n@app.route('/auditor/reports')\n@role_required('auditor')\ndef auditor_reports():\n    \"\"\"Auditor's reports view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(auditor_id=user.id).all()\n    \n    return render_template('auditor/reports.html', audits=audits)\n\n@app.route('/auditor/finding/<int:finding_id>')\n@role_required('auditor')\ndef auditor_finding_detail(finding_id):\n    \"\"\"Auditor's detailed finding view\"\"\"\n    user = get_current_user()\n    finding = Finding.query.join(Audit).filter(\n        Finding.id == finding_id, \n        Audit.auditor_id == user.id\n    ).first_or_404()\n    \n    corrective_actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    \n    return render_template('auditor/finding_detail.html', \n                         finding=finding, corrective_actions=corrective_actions)\n\n@app.route('/auditor/create-finding/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('auditor')\ndef auditor_create_finding(audit_id):\n    \"\"\"Create new finding during audit\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        title = request.form['title']\n        description = request.form['description']\n        severity = request.form['severity']\n        category = request.form['category']\n        risk_assessment = request.form.get('risk_assessment', '')\n        recommendation = request.form.get('recommendation', '')\n        auditee_id = request.form.get('auditee_id')\n        due_date = datetime.strptime(request.form['due_date'], '%Y-%m-%d').date() if request.form.get('due_date') else None\n        \n        # Generate finding reference number\n        year = datetime.utcnow().year\n        count = Finding.query.filter(extract('year', Finding.created_at) == year).count() + 1\n        reference_number = f\"FND-{year}-{count:04d}\"\n        \n        finding = Finding()\n        finding.audit_id = audit_id\n        finding.title = title\n        finding.description = description\n        finding.severity = severity\n        finding.category = category\n        finding.risk_assessment = risk_assessment\n        finding.recommendation = recommendation\n        finding.auditee_id = auditee_id\n        finding.identified_by_id = user.id\n        finding.due_date = due_date\n        finding.status = 'open'\n        \n        db.session.add(finding)\n        db.session.commit()\n        \n        log_audit_action('create_finding', 'finding', finding.id, f'Created finding {reference_number}')\n        \n        # Notify auditee if assigned\n        if auditee_id:\n            create_notification(\n                auditee_id,\n                'New Finding Assigned',\n                f'A new finding has been assigned to you: {title}',\n                'finding_assigned',\n                'finding',\n                finding.id\n            )\n        \n        flash('Finding created successfully!', 'success')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    return render_template('auditor/create_finding.html', audit=audit, auditees=auditees)\n\n# Auditee workflow routes\n@app.route('/auditee/findings')\n@role_required('auditee')\ndef auditee_findings():\n    \"\"\"Auditee's findings view\"\"\"\n    user = get_current_user()\n    findings = Finding.query.filter_by(auditee_id=user.id).order_by(Finding.created_at.desc()).all()\n    \n    return render_template('auditee/findings.html', findings=findings)\n\n@app.route('/auditee/finding/<int:finding_id>')\n@role_required('auditee')\ndef auditee_finding_detail(finding_id):\n    \"\"\"Auditee's detailed finding view\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    corrective_actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    evidence = EvidenceFile.query.filter_by(finding_id=finding_id).all()\n    \n    return render_template('auditee/finding_detail.html', \n                         finding=finding, corrective_actions=corrective_actions, evidence=evidence)\n\n@app.route('/auditee/corrective-actions')\n@role_required('auditee')\ndef auditee_corrective_actions():\n    \"\"\"Auditee's corrective actions view\"\"\"\n    user = get_current_user()\n    actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id\n    ).order_by(CorrectiveAction.created_at.desc()).all()\n    \n    return render_template('auditee/corrective_actions.html', actions=actions)\n\n@app.route('/auditee/create-corrective-action/<int:finding_id>', methods=['GET', 'POST'])\n@role_required('auditee')\ndef auditee_create_corrective_action(finding_id):\n    \"\"\"Create corrective action for finding\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        description = request.form['description']\n        action_plan = request.form['action_plan']\n        responsible_person = request.form['responsible_person']\n        target_completion_date = datetime.strptime(request.form['target_completion_date'], '%Y-%m-%d').date()\n        \n        action = CorrectiveAction()\n        action.action_description = description\n        action.responsible_person_id = responsible_person if responsible_person else user.id\n        action.planned_completion_date = target_completion_date\n        action.finding_id = finding_id\n        action.created_by_id = user.id\n        \n        db.session.add(action)\n        \n        # Update finding status\n        finding.status = 'in_progress'\n        db.session.commit()\n        \n        log_audit_action('create_corrective_action', 'corrective_action', action.id, \n                        f'Created corrective action for finding {finding.id}')\n        \n        # Notify auditor\n        create_notification(\n            finding.audit.auditor_id,\n            'Corrective Action Proposed',\n            f'A corrective action has been proposed for finding: {finding.title}',\n            'corrective_action_proposed',\n            'corrective_action',\n            action.id\n        )\n        \n        flash('Corrective action created successfully!', 'success')\n        return redirect(url_for('auditee_finding_detail', finding_id=finding_id))\n    \n    return render_template('auditee/create_corrective_action.html', finding=finding)\n\n@app.route('/auditee/evidence')\n@role_required('auditee')\ndef auditee_evidence():\n    \"\"\"Auditee's evidence management\"\"\"\n    user = get_current_user()\n    evidence = EvidenceFile.query.join(Finding).filter(\n        Finding.auditee_id == user.id\n    ).order_by(EvidenceFile.uploaded_at.desc()).all()\n    \n    return render_template('auditee/evidence.html', evidence=evidence)\n\n@app.route('/auditee/upload-evidence/<int:finding_id>', methods=['GET', 'POST'])\n@role_required('auditee')\ndef auditee_upload_evidence(finding_id):\n    \"\"\"Upload evidence for finding\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        title = request.form['title']\n        description = request.form.get('description', '')\n        evidence_type = request.form['evidence_type']\n        \n        # Handle file upload\n        if 'file' in request.files:\n            file = request.files['file']\n            if file and file.filename:\n                file_info = save_uploaded_file(file, 'uploads/evidence')\n                if file_info:\n                    evidence = EvidenceFile()\n                    evidence.original_filename = title\n                    evidence.description = description  \n                    evidence.filename = file_info['filename']\n                    evidence.file_path = file_info['file_path']\n                    evidence.file_size = file_info['file_size']\n                    evidence.file_type = file_info['file_type']\n                    evidence.finding_id = finding_id\n                    evidence.uploaded_by_id = user.id\n                    \n                    db.session.add(evidence)\n                    db.session.commit()\n                    \n                    log_audit_action('upload_evidence', 'evidence', evidence.id, \n                                   f'Uploaded evidence for finding {finding.id}')\n                    \n                    # Notify auditor\n                    create_notification(\n                        finding.audit.auditor_id,\n                        'Evidence Uploaded',\n                        f'Evidence has been uploaded for finding: {finding.title}',\n                        'evidence_uploaded',\n                        'evidence',\n                        evidence.id\n                    )\n                    \n                    flash('Evidence uploaded successfully!', 'success')\n                    return redirect(url_for('auditee_finding_detail', finding_id=finding_id))\n                else:\n                    flash('Failed to upload file. Please try again.', 'error')\n            else:\n                flash('Please select a file to upload.', 'error')\n    \n    return render_template('auditee/upload_evidence.html', finding=finding)\n\n@app.route('/auditee/reports')\n@role_required('auditee')\ndef auditee_reports():\n    \"\"\"Auditee's reports view\"\"\"\n    user = get_current_user()\n    findings = Finding.query.filter_by(auditee_id=user.id).all()\n    \n    return render_template('auditee/reports.html', findings=findings)\n\n@app.route('/supervisor/reports')\n@role_required('supervisor')\ndef supervisor_reports():\n    \"\"\"Supervisor's reports view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    \n    return render_template('supervisor/reports.html', audits=audits)\n\n# Supervisor evidence review functionality\n@app.route('/supervisor/evidence/<int:evidence_id>')\n@role_required('supervisor')\ndef supervisor_review_evidence(evidence_id):\n    \"\"\"Supervisor reviews evidence\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check if supervisor has access to this evidence through audit supervision  \n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to review this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    return render_template('supervisor/evidence_review.html', evidence=evidence)\n\n@app.route('/supervisor/evidence/<int:evidence_id>/comment', methods=['POST'])\n@role_required('supervisor')\ndef supervisor_comment_evidence(evidence_id):\n    \"\"\"Supervisor adds comment to evidence\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to comment on this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    comment = request.form.get('comment')\n    status = request.form.get('status', 'reviewed')\n    \n    if comment:\n        # Add supervisor comment to evidence\n        evidence.supervisor_comment = comment\n        evidence.supervisor_status = status\n        evidence.reviewed_by_id = user.id\n        evidence.reviewed_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        # Notify auditee\n        create_notification(\n            evidence.finding.auditee_id,\n            'Evidence Reviewed',\n            f'Your evidence for \"{evidence.finding.title}\" has been reviewed by supervisor.',\n            'evidence_reviewed',\n            'evidence',\n            evidence.id\n        )\n        \n        flash('Comment added successfully!', 'success')\n    \n    return redirect(url_for('supervisor_review_evidence', evidence_id=evidence_id))\n\n@app.route('/supervisor/evidence/<int:evidence_id>/download')\n@role_required('supervisor')\ndef supervisor_download_evidence(evidence_id):\n    \"\"\"Supervisor downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to download this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('supervisor_review_evidence', evidence_id=evidence_id))\n\n# Note: Finding detail routes are defined elsewhere in the file\n\n# Admin routes for audit management\n@app.route('/admin/audit/<int:audit_id>')\n@role_required('admin')\ndef admin_audit_detail(audit_id):\n    \"\"\"Admin audit detail view\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=get_current_user())\n\n@app.route('/admin/audit/<int:audit_id>/edit', methods=['GET', 'POST'])\n@role_required('admin')\ndef admin_edit_audit(audit_id):\n    \"\"\"Edit audit\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    if request.method == 'POST':\n        audit.title = request.form['title']\n        audit.description = request.form['description']\n        audit.department_id = request.form['department_id']\n        audit.auditor_id = request.form.get('auditor_id')\n        audit.auditee_id = request.form.get('auditee_id')\n        audit.supervisor_id = request.form.get('supervisor_id')\n        audit.audit_type = request.form['audit_type']\n        audit.planned_start_date = datetime.strptime(request.form['planned_start_date'], '%Y-%m-%d').date()\n        audit.planned_end_date = datetime.strptime(request.form['planned_end_date'], '%Y-%m-%d').date()\n        \n        db.session.commit()\n        \n        log_audit_action('edit_audit', 'audit', audit.id, f'Edited audit {audit.reference_number}')\n        flash('Audit updated successfully!', 'success')\n        return redirect(url_for('admin_audit_detail', audit_id=audit_id))\n    \n    departments = Department.query.filter_by(is_active=True).all()\n    auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    supervisors = User.query.filter_by(role='supervisor', is_active=True).all()\n    \n    return render_template('audits/create.html', audit=audit, departments=departments, \n                         auditors=auditors, auditees=auditees, supervisors=supervisors, edit_mode=True)\n\n# Supervisor audit detail route\n@app.route('/supervisor/audit/<int:audit_id>')\n@role_required('supervisor')\ndef supervisor_audit_detail(audit_id):\n    \"\"\"Supervisor audit detail view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=user)\n\n# Auditee audit detail route\n@app.route('/auditee/audit/<int:audit_id>')\n@role_required('auditee')\ndef auditee_audit_detail(audit_id):\n    \"\"\"Auditee audit detail view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditee_id=user.id).first_or_404()\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=user)\n\n# Admin notification management\n@app.route('/admin/notifications')\n@role_required('admin')\ndef admin_notifications():\n    \"\"\"Admin view all notifications\"\"\"\n    notifications = Notification.query.order_by(Notification.created_at.desc()).all()\n    return render_template('admin/notifications.html', notifications=notifications)\n\n@app.route('/admin/notification/<int:notification_id>/delete', methods=['POST'])\n@role_required('admin')\ndef admin_delete_notification(notification_id):\n    \"\"\"Admin delete notification\"\"\"\n    notification = Notification.query.get_or_404(notification_id)\n    user = get_current_user()\n    \n    # Log the deletion\n    log_audit_action('delete_notification', 'notification', notification_id, \n                   f'Deleted notification: {notification.title}')\n    \n    db.session.delete(notification)\n    db.session.commit()\n    \n    flash('Notification deleted successfully!', 'success')\n    return redirect(url_for('admin_notifications'))\n\n@app.route('/admin/notifications/delete-all', methods=['POST'])\n@role_required('admin')\ndef admin_delete_all_notifications():\n    \"\"\"Admin delete all notifications\"\"\"\n    user = get_current_user()\n    count = Notification.query.count()\n    \n    Notification.query.delete()\n    db.session.commit()\n    \n    log_audit_action('delete_all_notifications', 'notification', None, \n                   f'Deleted all {count} notifications')\n    \n    flash(f'All {count} notifications deleted successfully!', 'success')\n    return redirect(url_for('admin_notifications'))\n\n# General notification deletion routes for all user roles\n@app.route('/notifications/delete/<int:notification_id>', methods=['POST'])\n@login_required\ndef delete_user_notification(notification_id):\n    \"\"\"Delete a single notification for current user\"\"\"\n    user = get_current_user()\n    notification = Notification.query.filter_by(id=notification_id, user_id=user.id).first_or_404()\n    db.session.delete(notification)\n    db.session.commit()\n    \n    flash('Notification deleted successfully!', 'success')\n    return redirect(request.referrer or url_for('dashboard'))\n\n@app.route('/notifications/delete_all', methods=['POST'])\n@login_required  \ndef delete_all_user_notifications():\n    \"\"\"Delete all notifications for current user\"\"\"\n    user = get_current_user()\n    try:\n        count = Notification.query.filter_by(user_id=user.id).count()\n        Notification.query.filter_by(user_id=user.id).delete()\n        db.session.commit()\n        \n        flash(f'All {count} notifications deleted successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash('Error deleting notifications. Please try again.', 'error')\n    \n    return redirect(request.referrer or url_for('dashboard'))\n\n# Note: Auditee routes are defined elsewhere in the file\n\n# Auditor evidence download route\n@app.route('/auditor/evidence/<int:evidence_id>/download')\n@role_required('auditor')\ndef auditor_download_evidence(evidence_id):\n    \"\"\"Auditor downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission - auditor can download evidence from their audits\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.auditor_id != user.id:\n        flash('You do not have permission to download this evidence.', 'error')\n        return redirect(url_for('auditor_dashboard'))\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('auditor_finding_detail', finding_id=evidence.finding_id))\n\n# Admin evidence download route\n@app.route('/admin/evidence/<int:evidence_id>/download')\n@role_required('admin')\ndef admin_download_evidence(evidence_id):\n    \"\"\"Admin downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('admin_audit_detail', audit_id=evidence.finding.audit_id if evidence.finding else 1))\n\n# Context processor for template globals\n@app.context_processor\ndef inject_user():\n    return dict(current_user=get_current_user())\n","size_bytes":70107},"utils.py":{"content":"import os\nimport uuid\nfrom werkzeug.utils import secure_filename\nfrom flask import current_app\nimport string\nimport secrets\nfrom app import db\n\ndef generate_password(length=12):\n    \"\"\"Generate a secure random password\"\"\"\n    alphabet = string.ascii_letters + string.digits + \"!@#$%^&*\"\n    while True:\n        password = ''.join(secrets.choice(alphabet) for i in range(length))\n        # Ensure password has at least one lowercase, uppercase, digit and special char\n        if (any(c.islower() for c in password)\n                and any(c.isupper() for c in password)\n                and any(c.isdigit() for c in password)\n                and any(c in \"!@#$%^&*\" for c in password)):\n            return password\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'xls', 'xlsx'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef save_uploaded_file(file, upload_folder='uploads'):\n    \"\"\"Save uploaded file and return filename\"\"\"\n    if file and allowed_file(file.filename):\n        # Create upload directory if it doesn't exist\n        os.makedirs(upload_folder, exist_ok=True)\n        \n        # Generate unique filename\n        filename = str(uuid.uuid4()) + '_' + secure_filename(file.filename)\n        file_path = os.path.join(upload_folder, filename)\n        \n        # Save file\n        file.save(file_path)\n        \n        return {\n            'filename': filename,\n            'original_filename': file.filename,\n            'file_path': file_path,\n            'file_size': os.path.getsize(file_path),\n            'file_type': file.content_type or 'application/octet-stream'\n        }\n    return None\n\ndef get_audit_statistics():\n    \"\"\"Get audit statistics for dashboard\"\"\"\n    from models import Audit, Finding, CorrectiveAction\n    from sqlalchemy import func, extract\n    from datetime import datetime, timedelta\n    \n    current_year = datetime.utcnow().year\n    current_quarter = (datetime.utcnow().month - 1) // 3 + 1\n    \n    # Total audits this year\n    total_audits_year = Audit.query.filter(\n        extract('year', Audit.created_at) == current_year\n    ).count()\n    \n    # Audits by status\n    audits_by_status = db.session.query(\n        Audit.status, func.count(Audit.id)\n    ).group_by(Audit.status).all()\n    \n    # Top 5 recurring findings\n    top_findings = db.session.query(\n        Finding.category, func.count(Finding.id).label('count')\n    ).group_by(Finding.category).order_by(func.count(Finding.id).desc()).limit(5).all()\n    \n    # Overdue actions\n    overdue_actions = CorrectiveAction.query.filter(\n        CorrectiveAction.planned_completion_date < datetime.utcnow().date(),\n        CorrectiveAction.status != 'completed'\n    ).count()\n    \n    total_actions = CorrectiveAction.query.count()\n    sla_adherence = ((total_actions - overdue_actions) / total_actions * 100) if total_actions > 0 else 100\n    \n    return {\n        'total_audits_year': total_audits_year,\n        'audits_by_status': dict(audits_by_status),\n        'top_findings': top_findings,\n        'sla_adherence': round(sla_adherence, 1),\n        'overdue_actions': overdue_actions\n    }\n\ndef get_user_notifications(user_id, limit=10):\n    \"\"\"Get notifications for a user\"\"\"\n    from models import Notification\n    return Notification.query.filter_by(\n        user_id=user_id, is_read=False\n    ).order_by(Notification.created_at.desc()).limit(limit).all()\n\ndef create_notification(user_id, title, message, notification_type, related_entity_type=None, related_entity_id=None):\n    \"\"\"Create a new notification\"\"\"\n    from models import Notification\n    notification = Notification(\n        user_id=user_id,\n        title=title,\n        message=message,\n        notification_type=notification_type,\n        related_entity_type=related_entity_type,\n        related_entity_id=related_entity_id\n    )\n    db.session.add(notification)\n    db.session.commit()\n    return notification\n","size_bytes":4046},"static/css/style.css":{"content":"/* Audit Management System - Custom Styles */\n\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --warning-color: #fd7e14;\n    --danger-color: #dc3545;\n    --info-color: #0dcaf0;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f8f9fa;\n}\n\n.navbar-brand {\n    font-weight: 600;\n}\n\n/* Role-based color scheme */\n.role-admin { --role-color: var(--success-color); }\n.role-supervisor { --role-color: var(--info-color); }\n.role-auditor { --role-color: var(--warning-color); }\n.role-auditee { --role-color: var(--secondary-color); }\n\n/* Dashboard Cards */\n.card {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n}\n\n.card-header {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n    background: rgba(255, 255, 255, 0.8);\n    font-weight: 600;\n}\n\n/* Statistics Cards */\n.stats-card {\n    background: linear-gradient(135deg, var(--bs-primary), #0056b3);\n    color: white;\n    border-radius: 15px;\n}\n\n.stats-card .card-body {\n    padding: 1.5rem;\n}\n\n.stats-number {\n    font-size: 2.5rem;\n    font-weight: 700;\n    line-height: 1;\n}\n\n/* Navigation Enhancements */\n.navbar {\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.nav-link {\n    border-radius: 6px;\n    margin: 0 2px;\n    transition: all 0.2s ease;\n}\n\n.nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n/* Forms */\n.form-control, .form-select {\n    border-radius: 8px;\n    border: 1px solid #e0e0e0;\n    padding: 0.75rem 1rem;\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n/* Buttons */\n.btn {\n    border-radius: 8px;\n    font-weight: 500;\n    padding: 0.5rem 1.25rem;\n    transition: all 0.2s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n}\n\n/* Tables */\n.table {\n    border-radius: 12px;\n    overflow: hidden;\n}\n\n.table thead th {\n    border-bottom: 2px solid #dee2e6;\n    background-color: #f8f9fa;\n    font-weight: 600;\n    color: #495057;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 10px;\n    font-weight: 500;\n}\n\n/* Status Badges */\n.badge {\n    font-size: 0.75em;\n    padding: 0.35em 0.65em;\n    border-radius: 6px;\n}\n\n/* Dashboard specific */\n.dashboard-header {\n    background: linear-gradient(135deg, #fff, #f8f9fa);\n    border-radius: 15px;\n    padding: 2rem;\n    margin-bottom: 2rem;\n    border: 1px solid #e9ecef;\n}\n\n/* Notification styles */\n.notification-item {\n    border-radius: 8px;\n    padding: 0.75rem;\n    margin-bottom: 0.5rem;\n    background: #f8f9fa;\n    border-left: 4px solid var(--primary-color);\n}\n\n.notification-unread {\n    background: #e3f2fd;\n    border-left-color: var(--info-color);\n}\n\n/* Audit status colors */\n.status-draft { color: var(--secondary-color); }\n.status-in-progress { color: var(--warning-color); }\n.status-review { color: var(--info-color); }\n.status-completed { color: var(--success-color); }\n.status-closed { color: var(--dark-color); }\n\n/* Finding severity colors */\n.severity-low { color: var(--info-color); }\n.severity-medium { color: var(--warning-color); }\n.severity-high { color: var(--danger-color); }\n.severity-critical { color: #8b0000; font-weight: bold; }\n\n/* File upload area */\n.upload-area {\n    border: 2px dashed #dee2e6;\n    border-radius: 12px;\n    padding: 2rem;\n    text-align: center;\n    background: #fafafa;\n    transition: all 0.3s ease;\n}\n\n.upload-area:hover {\n    border-color: var(--primary-color);\n    background: #f0f8ff;\n}\n\n/* Progress bars */\n.progress {\n    height: 8px;\n    border-radius: 6px;\n}\n\n/* Sidebar for role-specific pages */\n.sidebar {\n    background: #fff;\n    border-radius: 12px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n    padding: 1.5rem;\n}\n\n.sidebar .nav-link {\n    color: #495057;\n    border-radius: 8px;\n    padding: 0.75rem 1rem;\n    margin-bottom: 0.25rem;\n}\n\n.sidebar .nav-link:hover,\n.sidebar .nav-link.active {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n/* Login page styles */\n.login-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n}\n\n.login-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 3rem;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .stats-number {\n        font-size: 2rem;\n    }\n    \n    .dashboard-header {\n        padding: 1.5rem;\n    }\n    \n    .card-body {\n        padding: 1rem;\n    }\n}\n\n/* Print styles */\n@media print {\n    .navbar, .sidebar {\n        display: none !important;\n    }\n    \n    .card {\n        box-shadow: none;\n        border: 1px solid #dee2e6;\n    }\n}\n\n/* Custom animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.5s ease-out;\n}\n\n/* Chart container styles */\n.chart-container {\n    position: relative;\n    height: 300px;\n    background: white;\n    border-radius: 12px;\n    padding: 1rem;\n}","size_bytes":5416},"static/js/dashboard.js":{"content":"// Dashboard-specific JavaScript functionality\n\n(function() {\n    'use strict';\n\n    // Dashboard configuration\n    const dashboardConfig = {\n        chartColors: {\n            primary: '#007bff',\n            success: '#28a745',\n            warning: '#ffc107',\n            danger: '#dc3545',\n            info: '#17a2b8',\n            secondary: '#6c757d',\n            light: '#f8f9fa',\n            dark: '#343a40'\n        },\n        animationDuration: 1000\n    };\n\n    // Initialize dashboard when DOM is ready\n    document.addEventListener('DOMContentLoaded', function() {\n        initializeDashboard();\n    });\n\n    function initializeDashboard() {\n        // Initialize statistics animations\n        animateStatistics();\n        \n        // Initialize refresh functionality\n        initializeRefresh();\n        \n        // Initialize dashboard filters\n        initializeDashboardFilters();\n        \n        // Set up auto-refresh\n        setupAutoRefresh();\n        \n        console.log('Dashboard initialized');\n    }\n\n    // Animate statistics counters\n    function animateStatistics() {\n        const statNumbers = document.querySelectorAll('.dashboard-stat-number, h2, h4');\n        \n        statNumbers.forEach(function(element) {\n            const finalValue = parseInt(element.textContent);\n            if (!isNaN(finalValue) && finalValue > 0) {\n                animateCounter(element, 0, finalValue, 1500);\n            }\n        });\n    }\n\n    // Animate counter from start to end value\n    function animateCounter(element, start, end, duration) {\n        const startTime = performance.now();\n        const startValue = start;\n        const endValue = end;\n        \n        function updateCounter(currentTime) {\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing function for smooth animation\n            const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n            const currentValue = Math.round(startValue + (endValue - startValue) * easeOutQuart);\n            \n            element.textContent = currentValue;\n            \n            if (progress < 1) {\n                requestAnimationFrame(updateCounter);\n            }\n        }\n        \n        requestAnimationFrame(updateCounter);\n    }\n\n    // Create audit status chart\n    function createAuditStatusChart(statusData) {\n        const ctx = document.getElementById('auditStatusChart');\n        if (!ctx || !statusData) return;\n\n        const labels = Object.keys(statusData);\n        const data = Object.values(statusData);\n        const colors = labels.map(status => {\n            switch(status) {\n                case 'closed': return dashboardConfig.chartColors.success;\n                case 'in_progress': return dashboardConfig.chartColors.primary;\n                case 'review': return dashboardConfig.chartColors.warning;\n                case 'planned': return dashboardConfig.chartColors.secondary;\n                default: return dashboardConfig.chartColors.info;\n            }\n        });\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: labels.map(label => label.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())),\n                datasets: [{\n                    data: data,\n                    backgroundColor: colors,\n                    borderColor: '#fff',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom',\n                        labels: {\n                            padding: 20,\n                            usePointStyle: true\n                        }\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                                const percentage = ((context.raw / total) * 100).toFixed(1);\n                                return `${context.label}: ${context.raw} (${percentage}%)`;\n                            }\n                        }\n                    }\n                },\n                animation: {\n                    animateRotate: true,\n                    duration: dashboardConfig.animationDuration\n                }\n            }\n        });\n    }\n\n    // Create findings by severity chart\n    function createFindingsSeverityChart(findingsData) {\n        const ctx = document.getElementById('findingsSeverityChart');\n        if (!ctx || !findingsData) return;\n\n        const severityOrder = ['critical', 'high', 'medium', 'low'];\n        const labels = [];\n        const data = [];\n        const colors = [];\n\n        severityOrder.forEach(severity => {\n            if (findingsData[severity] !== undefined) {\n                labels.push(severity.charAt(0).toUpperCase() + severity.slice(1));\n                data.push(findingsData[severity]);\n                \n                switch(severity) {\n                    case 'critical': colors.push(dashboardConfig.chartColors.danger); break;\n                    case 'high': colors.push(dashboardConfig.chartColors.warning); break;\n                    case 'medium': colors.push(dashboardConfig.chartColors.info); break;\n                    case 'low': colors.push(dashboardConfig.chartColors.success); break;\n                    default: colors.push(dashboardConfig.chartColors.secondary);\n                }\n            }\n        });\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Number of Findings',\n                    data: data,\n                    backgroundColor: colors,\n                    borderColor: colors,\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        callbacks: {\n                            title: function(context) {\n                                return `${context[0].label} Severity Findings`;\n                            },\n                            label: function(context) {\n                                return `Count: ${context.raw}`;\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            stepSize: 1\n                        }\n                    },\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration,\n                    easing: 'easeOutQuart'\n                }\n            }\n        });\n    }\n\n    // Create monthly audit trend chart\n    function createMonthlyTrendChart(monthlyData) {\n        const ctx = document.getElementById('monthlyTrendChart');\n        if (!ctx || !monthlyData) return;\n\n        const labels = monthlyData.map(item => item.month);\n        const auditData = monthlyData.map(item => item.audits);\n        const findingData = monthlyData.map(item => item.findings);\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Audits',\n                        data: auditData,\n                        borderColor: dashboardConfig.chartColors.primary,\n                        backgroundColor: dashboardConfig.chartColors.primary + '20',\n                        tension: 0.4,\n                        fill: true\n                    },\n                    {\n                        label: 'Findings',\n                        data: findingData,\n                        borderColor: dashboardConfig.chartColors.warning,\n                        backgroundColor: dashboardConfig.chartColors.warning + '20',\n                        tension: 0.4,\n                        fill: true\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                interaction: {\n                    intersect: false\n                },\n                plugins: {\n                    legend: {\n                        position: 'top'\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            stepSize: 1\n                        }\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration\n                }\n            }\n        });\n    }\n\n    // Create completion rate gauge\n    function createCompletionRateGauge(completionRate) {\n        const ctx = document.getElementById('completionRateGauge');\n        if (!ctx) return;\n\n        const rate = completionRate || 0;\n        const remainingRate = 100 - rate;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                datasets: [{\n                    data: [rate, remainingRate],\n                    backgroundColor: [\n                        rate >= 80 ? dashboardConfig.chartColors.success : \n                        rate >= 60 ? dashboardConfig.chartColors.warning : \n                        dashboardConfig.chartColors.danger,\n                        dashboardConfig.chartColors.light\n                    ],\n                    borderWidth: 0,\n                    cutout: '70%'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        enabled: false\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration\n                }\n            },\n            plugins: [{\n                beforeDraw: function(chart) {\n                    const width = chart.width;\n                    const height = chart.height;\n                    const ctx = chart.ctx;\n\n                    ctx.restore();\n                    const fontSize = (height / 114).toFixed(2);\n                    ctx.font = fontSize + \"em sans-serif\";\n                    ctx.textBaseline = \"middle\";\n                    ctx.fillStyle = dashboardConfig.chartColors.dark;\n\n                    const text = rate.toFixed(1) + \"%\";\n                    const textX = Math.round((width - ctx.measureText(text).width) / 2);\n                    const textY = height / 2;\n\n                    ctx.fillText(text, textX, textY);\n                    ctx.save();\n                }\n            }]\n        });\n    }\n\n    // Initialize refresh functionality\n    function initializeRefresh() {\n        const refreshButton = document.getElementById('refreshDashboard');\n        if (refreshButton) {\n            refreshButton.addEventListener('click', function() {\n                refreshDashboard();\n            });\n        }\n    }\n\n    // Refresh dashboard data\n    function refreshDashboard() {\n        const refreshButton = document.getElementById('refreshDashboard');\n        const originalContent = refreshButton ? refreshButton.innerHTML : '';\n        \n        if (refreshButton) {\n            refreshButton.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Refreshing...';\n            refreshButton.disabled = true;\n        }\n\n        // Simulate refresh (in real implementation, this would be an API call)\n        setTimeout(function() {\n            window.location.reload();\n        }, 1000);\n    }\n\n    // Initialize dashboard filters\n    function initializeDashboardFilters() {\n        const timeRangeFilter = document.getElementById('timeRangeFilter');\n        const departmentFilter = document.getElementById('departmentFilter');\n        \n        if (timeRangeFilter) {\n            timeRangeFilter.addEventListener('change', function() {\n                updateDashboardData();\n            });\n        }\n        \n        if (departmentFilter) {\n            departmentFilter.addEventListener('change', function() {\n                updateDashboardData();\n            });\n        }\n    }\n\n    // Update dashboard data based on filters\n    function updateDashboardData() {\n        const timeRange = document.getElementById('timeRangeFilter')?.value;\n        const department = document.getElementById('departmentFilter')?.value;\n        \n        // Show loading state\n        showLoadingState();\n        \n        // In a real implementation, this would be an API call\n        setTimeout(function() {\n            hideLoadingState();\n            // Update charts and statistics with new data\n        }, 1500);\n    }\n\n    // Show loading state\n    function showLoadingState() {\n        const cards = document.querySelectorAll('.card');\n        cards.forEach(function(card) {\n            const overlay = document.createElement('div');\n            overlay.className = 'loading-overlay d-flex justify-content-center align-items-center';\n            overlay.style.cssText = `\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(255, 255, 255, 0.8);\n                z-index: 10;\n            `;\n            overlay.innerHTML = '<div class=\"spinner-border text-primary\" role=\"status\"></div>';\n            \n            card.style.position = 'relative';\n            card.appendChild(overlay);\n        });\n    }\n\n    // Hide loading state\n    function hideLoadingState() {\n        const overlays = document.querySelectorAll('.loading-overlay');\n        overlays.forEach(function(overlay) {\n            overlay.remove();\n        });\n    }\n\n    // Setup auto-refresh\n    function setupAutoRefresh() {\n        const autoRefreshInterval = 5 * 60 * 1000; // 5 minutes\n        \n        setInterval(function() {\n            // Only auto-refresh if user is active\n            if (document.visibilityState === 'visible') {\n                updateStatistics();\n            }\n        }, autoRefreshInterval);\n    }\n\n    // Update statistics without full page reload\n    function updateStatistics() {\n        // This would typically fetch new data from the server\n        console.log('Auto-updating statistics...');\n    }\n\n    // Real-time notifications\n    function initializeRealTimeNotifications() {\n        // This would typically use WebSockets or Server-Sent Events\n        // for real-time updates\n        console.log('Real-time notifications initialized');\n    }\n\n    // Dashboard widget management\n    function initializeWidgetManagement() {\n        const widgets = document.querySelectorAll('.dashboard-widget');\n        \n        widgets.forEach(function(widget) {\n            // Add minimize/maximize functionality\n            const header = widget.querySelector('.card-header');\n            if (header) {\n                const toggleButton = document.createElement('button');\n                toggleButton.className = 'btn btn-sm btn-outline-secondary ms-auto';\n                toggleButton.innerHTML = '<i class=\"fas fa-minus\"></i>';\n                toggleButton.addEventListener('click', function() {\n                    toggleWidget(widget, this);\n                });\n                \n                header.appendChild(toggleButton);\n            }\n        });\n    }\n\n    // Toggle widget visibility\n    function toggleWidget(widget, button) {\n        const body = widget.querySelector('.card-body');\n        const icon = button.querySelector('i');\n        \n        if (body.style.display === 'none') {\n            body.style.display = '';\n            icon.className = 'fas fa-minus';\n        } else {\n            body.style.display = 'none';\n            icon.className = 'fas fa-plus';\n        }\n    }\n\n    // Export dashboard utilities for global use\n    window.DashboardUtils = {\n        createAuditStatusChart: createAuditStatusChart,\n        createFindingsSeverityChart: createFindingsSeverityChart,\n        createMonthlyTrendChart: createMonthlyTrendChart,\n        createCompletionRateGauge: createCompletionRateGauge,\n        refreshDashboard: refreshDashboard,\n        updateDashboardData: updateDashboardData\n    };\n\n    // Make createAuditStatusChart available globally for template use\n    window.createAuditStatusChart = createAuditStatusChart;\n\n})();\n\n// Dashboard-specific helper functions\nfunction formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction calculatePercentage(value, total) {\n    return total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n}\n\nfunction getStatusColor(status) {\n    const statusColors = {\n        'planned': 'secondary',\n        'in_progress': 'primary',\n        'review': 'warning',\n        'closed': 'success',\n        'overdue': 'danger'\n    };\n    return statusColors[status] || 'secondary';\n}\n\nfunction getPriorityColor(priority) {\n    const priorityColors = {\n        'low': 'success',\n        'medium': 'info',\n        'high': 'warning',\n        'critical': 'danger'\n    };\n    return priorityColors[priority] || 'secondary';\n}\n\nfunction formatTimeAgo(date) {\n    const now = new Date();\n    const diffTime = Math.abs(now - new Date(date));\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return `${Math.floor(diffDays / 30)} months ago`;\n}\n\nfunction isDueSoon(dueDate, daysThreshold = 3) {\n    const now = new Date();\n    const due = new Date(dueDate);\n    const diffTime = due - now;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays <= daysThreshold && diffDays > 0;\n}\n\nfunction isOverdue(dueDate) {\n    const now = new Date();\n    const due = new Date(dueDate);\n    return due < now;\n}\n","size_bytes":18612},"static/js/main.js":{"content":"// Audit Management System - Main JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Initialize popovers\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n\n    // Auto-hide alerts after 5 seconds\n    setTimeout(function() {\n        var alerts = document.querySelectorAll('.alert');\n        alerts.forEach(function(alert) {\n            var bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        });\n    }, 5000);\n\n    // Mark notifications as read\n    document.addEventListener('click', function(e) {\n        if (e.target.matches('.mark-notification-read')) {\n            e.preventDefault();\n            const notificationId = e.target.dataset.notificationId;\n            \n            fetch(`/api/notifications/${notificationId}/mark-read`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    e.target.closest('.notification-item').classList.remove('notification-unread');\n                    updateNotificationCount();\n                }\n            })\n            .catch(error => console.error('Error:', error));\n        }\n    });\n\n    // Update notification count\n    function updateNotificationCount() {\n        const unreadNotifications = document.querySelectorAll('.notification-unread').length;\n        const badge = document.querySelector('.notification-badge');\n        if (badge) {\n            if (unreadNotifications > 0) {\n                badge.textContent = unreadNotifications;\n                badge.style.display = 'inline';\n            } else {\n                badge.style.display = 'none';\n            }\n        }\n    }\n\n    // File upload preview\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    fileInputs.forEach(function(input) {\n        input.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            const preview = input.parentElement.querySelector('.file-preview');\n            \n            if (file && preview) {\n                preview.innerHTML = `\n                    <div class=\"alert alert-info\">\n                        <i class=\"fas fa-file me-2\"></i>\n                        Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)\n                    </div>\n                `;\n            }\n        });\n    });\n\n    // Form validation\n    const forms = document.querySelectorAll('.needs-validation');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(e) {\n            if (!form.checkValidity()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            form.classList.add('was-validated');\n        });\n    });\n\n    // Date input validation\n    const dateInputs = document.querySelectorAll('input[type=\"date\"]');\n    dateInputs.forEach(function(input) {\n        input.addEventListener('change', function() {\n            const date = new Date(input.value);\n            const today = new Date();\n            const startDateInput = document.querySelector('input[name=\"planned_start_date\"]');\n            \n            if (input.name === 'planned_end_date' && startDateInput) {\n                const startDate = new Date(startDateInput.value);\n                if (date < startDate) {\n                    input.setCustomValidity('End date cannot be before start date');\n                } else {\n                    input.setCustomValidity('');\n                }\n            }\n        });\n    });\n\n    // Auto-refresh dashboard every 5 minutes if on dashboard page\n    if (window.location.pathname.includes('dashboard')) {\n        setInterval(function() {\n            // Refresh notification count\n            fetch('/api/notifications/count')\n                .then(response => response.json())\n                .then(data => {\n                    const badge = document.querySelector('.notification-badge');\n                    if (badge && data.count > 0) {\n                        badge.textContent = data.count;\n                        badge.style.display = 'inline';\n                    } else if (badge) {\n                        badge.style.display = 'none';\n                    }\n                })\n                .catch(error => console.error('Error refreshing notifications:', error));\n        }, 300000); // 5 minutes\n    }\n\n    // Search functionality\n    const searchInputs = document.querySelectorAll('.search-input');\n    searchInputs.forEach(function(input) {\n        input.addEventListener('input', function() {\n            const searchTerm = input.value.toLowerCase();\n            const targetTable = document.querySelector(input.dataset.target);\n            \n            if (targetTable) {\n                const rows = targetTable.querySelectorAll('tbody tr');\n                rows.forEach(function(row) {\n                    const text = row.textContent.toLowerCase();\n                    row.style.display = text.includes(searchTerm) ? '' : 'none';\n                });\n            }\n        });\n    });\n\n    // Confirmation dialogs for delete actions\n    const deleteButtons = document.querySelectorAll('.btn-delete');\n    deleteButtons.forEach(function(button) {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const message = button.dataset.confirmMessage || 'Are you sure you want to delete this item?';\n            if (confirm(message)) {\n                if (button.closest('form')) {\n                    button.closest('form').submit();\n                } else {\n                    window.location.href = button.href;\n                }\n            }\n        });\n    });\n});\n\n// Utility functions\nfunction showAlert(message, type = 'info') {\n    const alertContainer = document.querySelector('.alert-container') || document.body;\n    const alert = document.createElement('div');\n    alert.className = `alert alert-${type} alert-dismissible fade show`;\n    alert.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    alertContainer.insertBefore(alert, alertContainer.firstChild);\n    \n    // Auto-hide after 5 seconds\n    setTimeout(function() {\n        if (alert.parentNode) {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        }\n    }, 5000);\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}\n\nfunction formatDateTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\nfunction getBadgeClass(status) {\n    const statusMap = {\n        'draft': 'secondary',\n        'in_progress': 'warning',\n        'review': 'info',\n        'completed': 'success',\n        'closed': 'dark',\n        'open': 'danger',\n        'planned': 'secondary',\n        'overdue': 'danger',\n        'low': 'info',\n        'medium': 'warning',\n        'high': 'danger',\n        'critical': 'danger'\n    };\n    return statusMap[status] || 'secondary';\n}","size_bytes":7872}}}